{"ast":null,"code":"import _toConsumableArray from\"D:\\\\BinaryTree-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"D:\\\\BinaryTree-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"D:\\\\BinaryTree-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import{options}from\"../config\";var Node=/*#__PURE__*/function(){function Node(value){var parent=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;_classCallCheck(this,Node);this.id=Node.counter;Node.counter++;this.parent=parent;this.value=value;this.left=null;this.right=null;}_createClass(Node,[{key:\"_convert\",value:function _convert(item){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;return isNaN(item)?parseInt(item.charCodeAt(i),10):parseInt(item,10);}},{key:\"_handleEqual\",value:function _handleEqual(item,itemValue,thisValue){if(isNaN(item)){var index=1;while(itemValue===thisValue){itemValue=this._convert(item,index);thisValue=this._convert(this.value,index);index++;if(index>=this.value.length){this.addRightChild(item);return;}if(index>=item.length){this.addLeftChild(item);return;}}if(itemValue===thisValue){this.addLeftChild(item);}else{this._compareValues(item,itemValue,thisValue);}}else{// same number, insert at left child\nthis.addLeftChild(item);}}},{key:\"_compareValues\",value:function _compareValues(item,itemValue,thisValue){if(itemValue<thisValue){this.addLeftChild(item);}else if(itemValue>thisValue){this.addRightChild(item);}else{// special case for equality\nthis._handleEqual(item,itemValue,thisValue);}}},{key:\"addLeftChild\",value:function addLeftChild(item){this.left?this.left.insert(item):this.left=new Node(item,this);}},{key:\"addRightChild\",value:function addRightChild(item){this.right?this.right.insert(item):this.right=new Node(item,this);}},{key:\"insert\",value:function insert(item){var itemValue=this._convert(item);if(this.value){var thisValue=this._convert(this.value);this._compareValues(item,itemValue,thisValue);}else{this.value=item;}}},{key:\"toGraph\",value:function toGraph(){var isRoot=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;var edges=this.parent?[{from:this.parent.id,to:this.id}]:[];var nodes=this.value?[{id:this.id,label:this.value,shape:isRoot?\"box\":options.nodes.shape}]:[];if(this.left){var leftRes=this.left.toGraph(false);edges=[].concat(_toConsumableArray(edges),_toConsumableArray(leftRes.edges));nodes=[].concat(_toConsumableArray(nodes),_toConsumableArray(leftRes.nodes));}if(this.right){var rightRes=this.right.toGraph(false);edges=[].concat(_toConsumableArray(edges),_toConsumableArray(rightRes.edges));nodes=[].concat(_toConsumableArray(nodes),_toConsumableArray(rightRes.nodes));}return{nodes:nodes,edges:edges};}}]);return Node;}();Node.counter=0;export{Node as BinaryTree};","map":{"version":3,"names":["options","Node","value","parent","arguments","length","undefined","_classCallCheck","id","counter","left","right","_createClass","key","_convert","item","i","isNaN","parseInt","charCodeAt","_handleEqual","itemValue","thisValue","index","addRightChild","addLeftChild","_compareValues","insert","toGraph","isRoot","edges","from","to","nodes","label","shape","leftRes","concat","_toConsumableArray","rightRes","BinaryTree"],"sources":["D:/BinaryTree-master/src/tree-lib/BinaryTree.js"],"sourcesContent":["import {options} from \"../config\";\n\nclass Node {\n    static counter = 0;\n\n    constructor(value, parent = null) {\n        this.id = Node.counter;\n        Node.counter++;\n\n        this.parent = parent;\n        this.value = value;\n        this.left = null;\n        this.right = null;\n    }\n\n    _convert(item, i = 0) {\n        return isNaN(item) ? parseInt(item.charCodeAt(i), 10) : parseInt(item, 10);\n    }\n\n    _handleEqual(item, itemValue, thisValue) {\n        if (isNaN(item)) {\n            let index = 1;\n            while (itemValue === thisValue) {\n                itemValue = this._convert(item, index);\n                thisValue = this._convert(this.value, index);\n                index++;\n\n                if (index >= this.value.length) {\n                    this.addRightChild(item);\n                    return;\n                }\n                if (index >= item.length) {\n                    this.addLeftChild(item);\n                    return;\n                }\n            }\n            if (itemValue === thisValue) {\n                this.addLeftChild(item)\n            } else {\n                this._compareValues(item, itemValue, thisValue);\n            }\n\n        } else {\n            // same number, insert at left child\n            this.addLeftChild(item)\n        }\n    }\n\n    _compareValues(item, itemValue, thisValue) {\n        if (itemValue < thisValue) {\n            this.addLeftChild(item)\n        } else if (itemValue > thisValue) {\n            this.addRightChild(item)\n        } else {\n            // special case for equality\n            this._handleEqual(item, itemValue, thisValue);\n        }\n    }\n\n    addLeftChild(item) {\n        this.left ? this.left.insert(item) : this.left = new Node(item, this);\n    }\n\n    addRightChild(item) {\n        this.right ? this.right.insert(item) : this.right = new Node(item, this);\n    }\n\n    insert(item) {\n        let itemValue = this._convert(item);\n        if (this.value) {\n            let thisValue = this._convert(this.value);\n            this._compareValues(item, itemValue, thisValue)\n        } else {\n            this.value = item;\n        }\n    }\n\n    toGraph(isRoot = true) {\n        let edges = this.parent ?\n            [\n                {\n                    from: this.parent.id,\n                    to: this.id\n                }\n            ] : [];\n        let nodes = this.value ?\n            [\n                {\n                    id: this.id,\n                    label: this.value,\n                    shape: isRoot? \"box\" : options.nodes.shape\n                }\n            ] : [];\n        if (this.left) {\n            let leftRes = this.left.toGraph(false);\n            edges = [...edges, ...leftRes.edges];\n            nodes = [...nodes, ...leftRes.nodes];\n        }\n        if (this.right) {\n            let rightRes = this.right.toGraph(false);\n            edges = [...edges, ...rightRes.edges];\n            nodes = [...nodes, ...rightRes.nodes];\n        }\n\n        return {\n            nodes,\n            edges\n        }\n    }\n\n}\n\nexport {Node as BinaryTree};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}