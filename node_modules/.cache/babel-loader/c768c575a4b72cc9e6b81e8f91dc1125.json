{"ast":null,"code":"var _jsxFileName = \"D:\\\\BinaryTree-master\\\\src\\\\components\\\\TreeGraph.js\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport Graph from \"react-graph-vis\";\nimport { InputForm } from \"./InputForm\";\nimport { BinaryTree } from \"../tree-lib/BinaryTree\";\nimport Col from \"react-bootstrap/Col\";\nimport { options } from \"../config\";\nimport Row from \"react-bootstrap/Row\";\nimport { IconTrash } from \"./Icons\";\nlet TreeGraph = props => {\n  const defaultTree = {\n    edges: [],\n    nodes: []\n  };\n  let [tree, setTree] = useState(new BinaryTree(null));\n  let [representation, setRepresentation] = useState({\n    edges: [],\n    nodes: []\n  });\n  let [network, setNetwork] = useState(null);\n  let [divElement, setDiv] = useState(null);\n  let handleResize = useCallback(() => {\n    if (network) {\n      let newOptions = options;\n      newOptions.height = `${divElement.clientHeight}px`;\n      network.setOptions(newOptions);\n      network.fit();\n    }\n  }, [network, divElement]);\n  useEffect(() => {\n    window.addEventListener('resize', handleResize);\n  });\n  useEffect(() => {\n    handleResize();\n  });\n  const update = newVal => {\n    setRepresentation(newVal);\n    if (network) {\n      network.setData(newVal);\n    }\n  };\n  const clear = () => {\n    update(defaultTree);\n    setTree(new BinaryTree(null));\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 4,\n    className: \"mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputForm, {\n    update: update,\n    tree: tree,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Row, {\n    className: \"mt-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-danger\",\n    onClick: () => {\n      clear();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(IconTrash, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 29\n    }\n  }), \"Clear tree\")))), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: '80vh'\n    },\n    ref: divElement => {\n      setDiv(divElement);\n    },\n    className: \"border border-dark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Graph, {\n    options: props.options,\n    updateTrigger: representation,\n    graph: {\n      edges: [],\n      nodes: []\n    },\n    getNetwork: network => {\n      setNetwork(network);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }\n  }))));\n};\nexport { TreeGraph };","map":{"version":3,"names":["React","useCallback","useEffect","useState","Graph","InputForm","BinaryTree","Col","options","Row","IconTrash","TreeGraph","props","defaultTree","edges","nodes","tree","setTree","representation","setRepresentation","network","setNetwork","divElement","setDiv","handleResize","newOptions","height","clientHeight","setOptions","fit","window","addEventListener","update","newVal","setData","clear","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","md","className","onClick","style","ref","updateTrigger","graph","getNetwork"],"sources":["D:/BinaryTree-master/src/components/TreeGraph.js"],"sourcesContent":["import React, {useCallback, useEffect, useState} from \"react\";\nimport Graph from \"react-graph-vis\";\nimport {InputForm} from \"./InputForm\";\nimport {BinaryTree} from \"../tree-lib/BinaryTree\";\nimport Col from \"react-bootstrap/Col\";\nimport {options} from \"../config\";\nimport Row from \"react-bootstrap/Row\";\nimport {IconTrash} from \"./Icons\";\n\nlet TreeGraph = (props) => {\n\n    const defaultTree = {\n        edges: [],\n        nodes: []\n    };\n\n    let [tree, setTree] = useState(new BinaryTree(null));\n\n    let [representation, setRepresentation] = useState({\n        edges: [],\n        nodes: []\n    });\n    let [network, setNetwork] = useState(null);\n    let [divElement, setDiv] = useState(null);\n\n    let handleResize = useCallback(() => {\n        if (network) {\n            let newOptions = options;\n            newOptions.height = `${divElement.clientHeight}px`;\n            network.setOptions(newOptions);\n            network.fit();\n        }\n    }, [network, divElement]);\n\n\n    useEffect(() => {\n        window.addEventListener('resize', handleResize);\n    });\n\n    useEffect(() => {\n        handleResize();\n    });\n\n    const update = (newVal) => {\n        setRepresentation(newVal);\n        if (network) {\n            network.setData(newVal);\n        }\n    };\n\n    const clear = () => {\n        update(defaultTree);\n        setTree(new BinaryTree(null));\n    };\n\n    return (\n        <React.Fragment>\n            <Col md={4} className={\"mb-2\"}>\n                <InputForm update={update} tree={tree}/>\n                <Row className={\"mt-3\"}>\n                    <Col>\n                        <button className={\"btn btn-danger\"} onClick={() => {\n                            clear()\n                        }}>\n                            <IconTrash/>\n                            Clear tree\n                        </button>\n                    </Col>\n                </Row>\n            </Col>\n            <Col>\n                <div style={{height: '80vh'}}\n                     ref={(divElement) => {\n                         setDiv(divElement)\n                     }}\n                     className={\"border border-dark\"}>\n                    <Graph\n                        options={props.options}\n                        updateTrigger={representation}\n                        graph={{edges: [], nodes: []}}\n                        getNetwork={network => {\n                            setNetwork(network)\n                        }}/>\n                </div>\n            </Col>\n        </React.Fragment>\n    );\n};\n\n\nexport {TreeGraph}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}